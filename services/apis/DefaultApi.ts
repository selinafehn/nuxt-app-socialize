/* tslint:disable */
/* eslint-disable */
/**
 * socialize API
 * socialize API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlexaRO,
  CreateAttendee,
  CreateMeetup,
  CreateOptions,
  CreateUser,
  CreateVoting,
  Meetupcreate,
  Meetupdelete,
  Meetupedit,
  Meetupoverview,
  Meetupshow,
  SendBackToken,
  Userlogin,
  Userlogoff,
} from '../models/index';
import {
    AlexaROFromJSON,
    AlexaROToJSON,
    CreateAttendeeFromJSON,
    CreateAttendeeToJSON,
    CreateMeetupFromJSON,
    CreateMeetupToJSON,
    CreateOptionsFromJSON,
    CreateOptionsToJSON,
    CreateUserFromJSON,
    CreateUserToJSON,
    CreateVotingFromJSON,
    CreateVotingToJSON,
    MeetupcreateFromJSON,
    MeetupcreateToJSON,
    MeetupdeleteFromJSON,
    MeetupdeleteToJSON,
    MeetupeditFromJSON,
    MeetupeditToJSON,
    MeetupoverviewFromJSON,
    MeetupoverviewToJSON,
    MeetupshowFromJSON,
    MeetupshowToJSON,
    SendBackTokenFromJSON,
    SendBackTokenToJSON,
    UserloginFromJSON,
    UserloginToJSON,
    UserlogoffFromJSON,
    UserlogoffToJSON,
} from '../models/index';

export interface CreateAttendeeRequest {
    createAttendee: CreateAttendee;
}

export interface CreateAttendeesTableRequest {
    token?: string;
}

export interface CreateMeetupTableRequest {
    token?: string;
}

export interface CreateOptionsRequest {
    createOptions: CreateOptions;
}

export interface CreateOptionsTableRequest {
    token?: string;
}

export interface CreateUserTableRequest {
    token?: string;
}

export interface CreateVotingRequest {
    createVoting: CreateVoting;
}

export interface CreateVotingTableRequest {
    token?: string;
}

export interface GetInfoRequest {
    name?: string;
}

export interface GetInfoAttendeesRequest {
    name?: string;
}

export interface GetInfoMeetupRequest {
    name?: string;
}

export interface GetInfoUserRequest {
    name?: string;
}

export interface GetInfoVotingsRequest {
    name?: string;
}

export interface GetMyMeetupRequest {
    token: string;
}

export interface GetTopOptVotingRequest {
    meetupid?: string;
}

export interface MeetupCreateRequest {
    meetupcreate: Meetupcreate;
}

export interface MeetupCreationRequest {
    createMeetup: CreateMeetup;
}

export interface MeetupDeleteRequest {
    meetupdelete: Meetupdelete;
}

export interface MeetupEditRequest {
    meetupedit: Meetupedit;
}

export interface MeetupOverviewRequest {
    meetupoverview: Meetupoverview;
}

export interface MeetupShowRequest {
    meetupshow: Meetupshow;
}

export interface ReadTasksViaAlexaRequest {
    alexaRO: AlexaRO;
}

export interface UserLogInRequest {
    userlogin: Userlogin;
}

export interface UserLogoffRequest {
    userlogoff: Userlogoff;
}

export interface UserRegisterRequest {
    createUser: CreateUser;
}

export interface UserRegistrationRequest {
    createUser: CreateUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * POST api/v1.0/dashboard/addAttendee
     */
    async createAttendeeRaw(requestParameters: CreateAttendeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createAttendee'] == null) {
            throw new runtime.RequiredError(
                'createAttendee',
                'Required parameter "createAttendee" was null or undefined when calling createAttendee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/dashboard/addAttendee`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAttendeeToJSON(requestParameters['createAttendee']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/dashboard/addAttendee
     */
    async createAttendee(requestParameters: CreateAttendeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createAttendeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/create-table/attendees
     */
    async createAttendeesTableRaw(requestParameters: CreateAttendeesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/create-table/attendees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/create-table/attendees
     */
    async createAttendeesTable(requestParameters: CreateAttendeesTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createAttendeesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/create-table/meetup
     */
    async createMeetupTableRaw(requestParameters: CreateMeetupTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/create-table/meetup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/create-table/meetup
     */
    async createMeetupTable(requestParameters: CreateMeetupTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createMeetupTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/dashboard/addOptions
     */
    async createOptionsRaw(requestParameters: CreateOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createOptions'] == null) {
            throw new runtime.RequiredError(
                'createOptions',
                'Required parameter "createOptions" was null or undefined when calling createOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/dashboard/addOptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOptionsToJSON(requestParameters['createOptions']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/dashboard/addOptions
     */
    async createOptions(requestParameters: CreateOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/create-table/options
     */
    async createOptionsTableRaw(requestParameters: CreateOptionsTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/create-table/options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/create-table/options
     */
    async createOptionsTable(requestParameters: CreateOptionsTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createOptionsTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/create-table/user
     */
    async createUserTableRaw(requestParameters: CreateUserTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/create-table/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/create-table/user
     */
    async createUserTable(requestParameters: CreateUserTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createUserTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/dashboard/addVoting
     */
    async createVotingRaw(requestParameters: CreateVotingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createVoting'] == null) {
            throw new runtime.RequiredError(
                'createVoting',
                'Required parameter "createVoting" was null or undefined when calling createVoting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/dashboard/addVoting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVotingToJSON(requestParameters['createVoting']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/dashboard/addVoting
     */
    async createVoting(requestParameters: CreateVotingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createVotingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/create-table/voting
     */
    async createVotingTableRaw(requestParameters: CreateVotingTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/create-table/voting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/create-table/voting
     */
    async createVotingTable(requestParameters: CreateVotingTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createVotingTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/v1.0/auth
     */
    async getInfoRaw(requestParameters: GetInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * GET api/v1.0/auth
     */
    async getInfo(requestParameters: GetInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getInfoRaw(requestParameters, initOverrides);
    }

    /**
     * GET api/v1.0/auth/attendees
     */
    async getInfoAttendeesRaw(requestParameters: GetInfoAttendeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/auth/attendees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET api/v1.0/auth/attendees
     */
    async getInfoAttendees(requestParameters: GetInfoAttendeesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getInfoAttendeesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/v1.0/auth/meetup
     */
    async getInfoMeetupRaw(requestParameters: GetInfoMeetupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/auth/meetup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET api/v1.0/auth/meetup
     */
    async getInfoMeetup(requestParameters: GetInfoMeetupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getInfoMeetupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/v1.0/auth/user
     */
    async getInfoUserRaw(requestParameters: GetInfoUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/auth/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET api/v1.0/auth/user
     */
    async getInfoUser(requestParameters: GetInfoUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getInfoUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/v1.0/auth/votings
     */
    async getInfoVotingsRaw(requestParameters: GetInfoVotingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/auth/votings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET api/v1.0/auth/votings
     */
    async getInfoVotings(requestParameters: GetInfoVotingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getInfoVotingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/v1.0/auth/mymeetup
     */
    async getMyMeetupRaw(requestParameters: GetMyMeetupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling getMyMeetup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/auth/mymeetup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET api/v1.0/auth/mymeetup
     */
    async getMyMeetup(requestParameters: GetMyMeetupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getMyMeetupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/v1.0/dashboard/doneVoting
     */
    async getTopOptVotingRaw(requestParameters: GetTopOptVotingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['meetupid'] != null) {
            queryParameters['meetupid'] = requestParameters['meetupid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1.0/dashboard/doneVoting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * GET api/v1.0/dashboard/doneVoting
     */
    async getTopOptVoting(requestParameters: GetTopOptVotingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getTopOptVotingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/dashboard/create
     */
    async meetupCreateRaw(requestParameters: MeetupCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['meetupcreate'] == null) {
            throw new runtime.RequiredError(
                'meetupcreate',
                'Required parameter "meetupcreate" was null or undefined when calling meetupCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/dashboard/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeetupcreateToJSON(requestParameters['meetupcreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/dashboard/create
     */
    async meetupCreate(requestParameters: MeetupCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.meetupCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/createmeetup
     */
    async meetupCreationRaw(requestParameters: MeetupCreationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createMeetup'] == null) {
            throw new runtime.RequiredError(
                'createMeetup',
                'Required parameter "createMeetup" was null or undefined when calling meetupCreation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/createmeetup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMeetupToJSON(requestParameters['createMeetup']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/createmeetup
     */
    async meetupCreation(requestParameters: MeetupCreationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.meetupCreationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE api/v1.0/dashboard/create
     */
    async meetupDeleteRaw(requestParameters: MeetupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['meetupdelete'] == null) {
            throw new runtime.RequiredError(
                'meetupdelete',
                'Required parameter "meetupdelete" was null or undefined when calling meetupDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/dashboard/create`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: MeetupdeleteToJSON(requestParameters['meetupdelete']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * DELETE api/v1.0/dashboard/create
     */
    async meetupDelete(requestParameters: MeetupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.meetupDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/dashboard/edit
     */
    async meetupEditRaw(requestParameters: MeetupEditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['meetupedit'] == null) {
            throw new runtime.RequiredError(
                'meetupedit',
                'Required parameter "meetupedit" was null or undefined when calling meetupEdit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/dashboard/edit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeetupeditToJSON(requestParameters['meetupedit']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/dashboard/edit
     */
    async meetupEdit(requestParameters: MeetupEditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.meetupEditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/v1.0/dashboard/overview
     */
    async meetupOverviewRaw(requestParameters: MeetupOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['meetupoverview'] == null) {
            throw new runtime.RequiredError(
                'meetupoverview',
                'Required parameter "meetupoverview" was null or undefined when calling meetupOverview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/dashboard/overview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: MeetupoverviewToJSON(requestParameters['meetupoverview']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * GET api/v1.0/dashboard/overview
     */
    async meetupOverview(requestParameters: MeetupOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.meetupOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET api/v1.0/dashboard/show
     */
    async meetupShowRaw(requestParameters: MeetupShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['meetupshow'] == null) {
            throw new runtime.RequiredError(
                'meetupshow',
                'Required parameter "meetupshow" was null or undefined when calling meetupShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/dashboard/show`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: MeetupshowToJSON(requestParameters['meetupshow']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * GET api/v1.0/dashboard/show
     */
    async meetupShow(requestParameters: MeetupShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.meetupShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/alexa
     */
    async readTasksViaAlexaRaw(requestParameters: ReadTasksViaAlexaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlexaRO>> {
        if (requestParameters['alexaRO'] == null) {
            throw new runtime.RequiredError(
                'alexaRO',
                'Required parameter "alexaRO" was null or undefined when calling readTasksViaAlexa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/alexa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlexaROToJSON(requestParameters['alexaRO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlexaROFromJSON(jsonValue));
    }

    /**
     * POST api/v1.0/alexa
     */
    async readTasksViaAlexa(requestParameters: ReadTasksViaAlexaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlexaRO> {
        const response = await this.readTasksViaAlexaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/auth/login
     */
    async userLogInRaw(requestParameters: UserLogInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendBackToken>> {
        if (requestParameters['userlogin'] == null) {
            throw new runtime.RequiredError(
                'userlogin',
                'Required parameter "userlogin" was null or undefined when calling userLogIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserloginToJSON(requestParameters['userlogin']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendBackTokenFromJSON(jsonValue));
    }

    /**
     * POST api/v1.0/auth/login
     */
    async userLogIn(requestParameters: UserLogInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendBackToken> {
        const response = await this.userLogInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE api/v1.0/auth/login
     */
    async userLogoffRaw(requestParameters: UserLogoffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['userlogoff'] == null) {
            throw new runtime.RequiredError(
                'userlogoff',
                'Required parameter "userlogoff" was null or undefined when calling userLogoff().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/auth/login`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UserlogoffToJSON(requestParameters['userlogoff']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * DELETE api/v1.0/auth/login
     */
    async userLogoff(requestParameters: UserLogoffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.userLogoffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/auth/register
     */
    async userRegisterRaw(requestParameters: UserRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createUser'] == null) {
            throw new runtime.RequiredError(
                'createUser',
                'Required parameter "createUser" was null or undefined when calling userRegister().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserToJSON(requestParameters['createUser']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/auth/register
     */
    async userRegister(requestParameters: UserRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.userRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST api/v1.0/createuser
     */
    async userRegistrationRaw(requestParameters: UserRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createUser'] == null) {
            throw new runtime.RequiredError(
                'createUser',
                'Required parameter "createUser" was null or undefined when calling userRegistration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1.0/createuser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserToJSON(requestParameters['createUser']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * POST api/v1.0/createuser
     */
    async userRegistration(requestParameters: UserRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.userRegistrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
